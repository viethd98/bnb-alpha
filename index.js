require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const { Web3 } = require("web3");
const moment = require("moment");
const axios = require("axios");
const fs = require("fs");
const path = require("path");

// Kh·ªüi t·∫°o Telegram Bot
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { 
  polling: true,
  request: {
    proxy: 'http://vietch123:Vietch123@82.21.51.173:7936'
  }
});

// Kh·ªüi t·∫°o Web3 v·ªõi BNB Chain
const web3 = new Web3(process.env.BNB_CHAIN_RPC_URL);

// ƒê∆∞·ªùng d·∫´n file JSON l∆∞u tr·ªØ v√≠ v√† user
const DATA_DIR = path.join(__dirname, "data");
const WALLETS_FILE = path.join(DATA_DIR, "tracked_wallets.json");

// ƒê·∫£m b·∫£o th∆∞ m·ª•c data t·ªìn t·∫°i
if (!fs.existsSync(DATA_DIR)) {
  fs.mkdirSync(DATA_DIR, { recursive: true });
}

// C·∫•u tr√∫c l∆∞u tr·ªØ: Map<chatId, { wallets: Set<string>, user: { id: number, username: string, first_name: string } }>
const trackedData = new Map();

// H√†m l∆∞u danh s√°ch v√≠ v√† user v√†o file JSON
function saveData() {
  try {
    const data = {};
    trackedData.forEach((info, chatId) => {
      // Chuy·ªÉn chatId th√†nh string khi l∆∞u
      data[chatId.toString()] = {
        wallets: Array.from(info.wallets),
        user: info.user,
      };
    });
    fs.writeFileSync(WALLETS_FILE, JSON.stringify(data, null, 2));
    console.log("ƒê√£ l∆∞u d·ªØ li·ªáu v√†o file:", WALLETS_FILE);
    console.log("D·ªØ li·ªáu ƒë√£ l∆∞u:", data);
  } catch (error) {
    console.error("L·ªói khi l∆∞u d·ªØ li·ªáu:", error);
  }
}

// H√†m ƒë·ªçc danh s√°ch v√≠ v√† user t·ª´ file JSON
function loadData() {
  try {
    if (fs.existsSync(WALLETS_FILE)) {
      const data = JSON.parse(fs.readFileSync(WALLETS_FILE));
      console.log("D·ªØ li·ªáu ƒë·ªçc t·ª´ file:", data);

      Object.entries(data).forEach(([chatId, info]) => {
        // Chuy·ªÉn chatId th√†nh number khi ƒë·ªçc
        trackedData.set(Number(chatId), {
          wallets: new Set(info.wallets),
          user: info.user,
        });
      });
      console.log("S·ªë l∆∞·ª£ng user ƒë√£ load:", trackedData.size);
      trackedData.forEach((info, chatId) => {
        console.log(
          `User ${chatId} c√≥ ${info.wallets.size} v√≠:`,
          Array.from(info.wallets)
        );
      });
    } else {
      console.log("Ch∆∞a c√≥ file d·ªØ li·ªáu, s·∫Ω t·∫°o m·ªõi khi c√≥ d·ªØ li·ªáu");
    }
  } catch (error) {
    console.error("L·ªói khi ƒë·ªçc file d·ªØ li·ªáu:", error);
  }
}

// T·∫£i d·ªØ li·ªáu khi kh·ªüi ƒë·ªông
loadData();

// H√†m ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
async function checkTransactionStatus(txHash) {
  try {
    const response = await axios.get("https://api.bscscan.com/api", {
      params: {
        module: "transaction",
        action: "gettxreceiptstatus",
        txhash: txHash,
        apikey: process.env.BSCSCAN_API_KEY,
      },
    });
    console.log(`Transaction ${txHash} status response:`, response.data);
    return response.data.result.status === "1";
  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch:", error);
    return false;
  }
}

// Test specific transaction
async function testTransaction() {
  const txHash = "0x619d1b9762b946cee2bf13546b66ed1ed660b3f12111202ef915276d02adae22";
  const status = await checkTransactionStatus(txHash);
  console.log(`Transaction ${txHash} is successful:`, status);
}

// Call test function
// testTransaction();

// H√†m l·∫•y danh s√°ch token transfers t·ª´ BscScan
async function getTokenTransfers(walletAddress) {
  try {
    // L·∫•y th·ªùi gian hi·ªán t·∫°i theo UTC
    const now = moment.utc();
    
    // T√≠nh th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c·ªßa ng√†y hi·ªán t·∫°i theo UTC
    const startOfDay = now.clone().startOf('day');
    const endOfDay = now.clone().endOf('day');

    // L·∫•y timestamp c·ªßa ƒë·∫ßu ng√†y v√† cu·ªëi ng√†y
    const startTimestamp = Math.floor(startOfDay.valueOf() / 1000);
    const endTimestamp = Math.floor(endOfDay.valueOf() / 1000);

    console.log('Time range:', {
      start: startOfDay.format('YYYY-MM-DD HH:mm:ss'),
      end: endOfDay.format('YYYY-MM-DD HH:mm:ss'),
      startTimestamp,
      endTimestamp
    });

    const response = await axios.get("https://api.bscscan.com/api", {
      params: {
        module: "account",
        action: "tokentx",
        address: walletAddress,
        startblock: 0,
        endblock: 99999999,
        sort: "desc",
        apikey: process.env.BSCSCAN_API_KEY,
      },
    });

    if (response.data.status === "1" && response.data.result.length > 0) {
      // L·ªçc giao d·ªãch trong ng√†y hi·ªán t·∫°i v√† ch·ªâ l·∫•y giao d·ªãch OUT (BSC-USD)
      const filteredTransactions = [];
      
      for (const tx of response.data.result) {
        const txTimestamp = parseInt(tx.timeStamp);
        const isInTimeRange =
          txTimestamp >= startTimestamp && txTimestamp <= endTimestamp;
        const isOutTransaction =
          tx.from.toLowerCase() === walletAddress.toLowerCase();
        const isBSCUSD = tx.tokenSymbol === "BSC-USD";

        // Ki·ªÉm tra gi√° tr·ªã giao d·ªãch
        const value =
          parseFloat(tx.value) / Math.pow(10, parseInt(tx.tokenDecimal));
        const isValidValue = value > 50;

        // Ki·ªÉm tra ƒë·ªãa ch·ªâ h·ª£p l·ªá (kh√¥ng ph·∫£i ƒë·ªãa ch·ªâ 0x0000...)
        const isValidAddress =
          tx.to !== "0x0000000000000000000000000000000000000000";

        if (isInTimeRange && isOutTransaction && isBSCUSD && isValidValue && isValidAddress) {
          // Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
          const isSuccessful = await checkTransactionStatus(tx.hash);
          if (isSuccessful) {
            filteredTransactions.push(tx);
          }
        }
      }

      return filteredTransactions;
    }
    return [];
  } catch (error) {
    console.error("L·ªói khi l·∫•y giao d·ªãch:", error);
    return [];
  }
}

// H√†m t√≠nh to√°n th·ªëng k√™
async function calculateStats(walletAddress) {
  try {
    const transfers = await getTokenTransfers(walletAddress);
    let totalBSCUSD = 0;
    let transactions = [];

    for (const tx of transfers) {
        console.log('tx', tx);
      // Ch·ªâ x·ª≠ l√Ω giao d·ªãch BSC-USD v√† v·ªõi contract c·ª• th·ªÉ
      const binanceDexContract = '0xb300000b72DEAEb607a12d5f54773D1C19c7028d';
      if (tx.tokenSymbol === "BSC-USD" && tx.to.toLowerCase() === binanceDexContract.toLowerCase()) {
        const value = parseFloat(tx.value) / Math.pow(10, parseInt(tx.tokenDecimal));
        // Ch·ªâ th√™m giao d·ªãch c√≥ gi√° tr·ªã > 0
        if (value > 0) {
          totalBSCUSD += value;
          transactions.push({
            time: moment.unix(tx.timeStamp).toISOString(),
            value: value,
            hash: tx.hash,
          });
        }
      }
    }
    
    return {
      totalBSCUSD,
      transactions,
    };
  } catch (error) {
    console.error("L·ªói khi t√≠nh to√°n th·ªëng k√™:", error);
    return { totalBSCUSD: 0, transactions: [] };
  }
}

// X·ª≠ l√Ω l·ªánh /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const data = trackedData.get(chatId);

  let message = "Vi·ªát ƒë·∫°i ca ch√†o anh em, d√πng l·ªánh sau ƒë·ªÉ track nh√©!\n\n";
  message += "C√°c l·ªánh:\n";
  message += "/track <ƒë·ªãa_ch·ªâ_v√≠> - Th√™m v√≠ v√†o danh s√°ch theo d√µi\n";
  message += "/list - Xem danh s√°ch v√≠ ƒëang theo d√µi\n";
  message += "/stats - Xem th·ªëng k√™ chi ti√™u BSC-USD h√¥m nay c·ªßa t·∫•t c·∫£ v√≠\n";
  message += "/remove <ƒë·ªãa_ch·ªâ_v√≠> - X√≥a v√≠ kh·ªèi danh s√°ch theo d√µi\n";
  message += "/clear - X√≥a t·∫•t c·∫£ v√≠ kh·ªèi danh s√°ch theo d√µi\n\n";

  if (data && data.wallets.size > 0) {
    message += `B·∫°n ƒëang theo d√µi ${data.wallets.size} v√≠.\n`;
    message += "S·ª≠ d·ª•ng /list ƒë·ªÉ xem chi ti·∫øt.";
  } else {
    message += "B·∫°n ch∆∞a theo d√µi v√≠ n√†o.\n";
    message += "S·ª≠ d·ª•ng /track <ƒë·ªãa_ch·ªâ_v√≠> ƒë·ªÉ th√™m v√≠.";
  }

  bot.sendMessage(chatId, message);
});

// X·ª≠ l√Ω l·ªánh /track
bot.onText(/\/track (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const walletAddress = match[1].trim();
  const user = {
    id: msg.from.id,
    username: msg.from.username || "unknown",
    first_name: msg.from.first_name || "unknown",
  };

  if (!web3.utils.isAddress(walletAddress)) {
    return bot.sendMessage(
      chatId,
      "‚ùå ƒê·ªãa ch·ªâ v√≠ kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p ƒë·ªãa ch·ªâ BNB Chain h·ª£p l·ªá."
    );
  }

  // Kh·ªüi t·∫°o d·ªØ li·ªáu n·∫øu ch∆∞a c√≥
  if (!trackedData.has(chatId)) {
    trackedData.set(chatId, {
      wallets: new Set(),
      user: user,
    });
  }

  const data = trackedData.get(chatId);
  if (data.wallets.has(walletAddress)) {
    return bot.sendMessage(chatId, "‚ö†Ô∏è V√≠ n√†y ƒë√£ ƒë∆∞·ª£c theo d√µi.");
  }

  data.wallets.add(walletAddress);
  // C·∫≠p nh·∫≠t th√¥ng tin user
  data.user = user;
  // L∆∞u v√†o file
  saveData();

  console.log(`ƒê√£ th√™m v√≠ ${walletAddress} cho user ${chatId}`);
  console.log("D·ªØ li·ªáu hi·ªán t·∫°i:", Array.from(trackedData.entries()));

  bot.sendMessage(
    chatId,
    `‚úÖ ƒê√£ th√™m v√≠ v√†o danh s√°ch theo d√µi:\n` +
      `üîπ ${walletAddress}\n\n` +
      `S·ª≠ d·ª•ng /stats ƒë·ªÉ xem th·ªëng k√™ chi ti√™u BSC-USD h√¥m nay.`
  );
});

// X·ª≠ l√Ω l·ªánh /list
bot.onText(/\/list/, (msg) => {
  const chatId = msg.chat.id;
  const data = trackedData.get(chatId);

  if (!data || data.wallets.size === 0) {
    return bot.sendMessage(
      chatId,
      "Ch∆∞a c√≥ v√≠ n√†o ƒë∆∞·ª£c theo d√µi. S·ª≠ d·ª•ng /track <ƒë·ªãa_ch·ªâ_v√≠> ƒë·ªÉ th√™m v√≠."
    );
  }

  let message = "Danh s√°ch v√≠ ƒëang theo d√µi:\n\n";
  let index = 1;
  for (const wallet of data.wallets) {
    message += `${index}. ${wallet}\n`;
    index++;
  }

  bot.sendMessage(chatId, message);
});

// X·ª≠ l√Ω l·ªánh /stats
bot.onText(/\/stats/, async (msg) => {
  const chatId = msg.chat.id;
  const data = trackedData.get(chatId);

  if (!data || data.wallets.size === 0) {
    return bot.sendMessage(
      chatId,
      "Ch∆∞a c√≥ v√≠ n√†o ƒë∆∞·ª£c theo d√µi. S·ª≠ d·ª•ng /track <ƒë·ªãa_ch·ªâ_v√≠> ƒë·ªÉ th√™m v√≠."
    );
  }

  let totalBSCUSD = 0;
  let allTransactions = [];

  // T√≠nh to√°n th·ªëng k√™ cho t·ª´ng v√≠
  for (const wallet of data.wallets) {
    const stats = await calculateStats(wallet);
    totalBSCUSD += stats.totalBSCUSD;
    allTransactions.push(
      ...stats.transactions.map((tx) => ({
        ...tx,
        wallet,
      }))
    );
  }

  // S·∫Øp x·∫øp t·∫•t c·∫£ giao d·ªãch theo th·ªùi gian
  allTransactions.sort(
    (a, b) => moment(b.time).valueOf() - moment(a.time).valueOf()
  );

  let message = `üìäVol Mua Binance Alpha\n\n`;
  message += `T·ªïng ti·ªÅn: ${totalBSCUSD.toFixed(2)} BSC-USD\n`;
  message += `S·ªë l∆∞·ª£ng giao d·ªãch: ${allTransactions.length}\n\n`;

  // Th·ªëng k√™ theo t·ª´ng v√≠
  let index = 1;
  for (const wallet of data.wallets) {
    const walletStats = allTransactions.filter((tx) => tx.wallet === wallet);
    const walletTotal = walletStats.reduce((sum, tx) => sum + tx.value, 0);

    message += `V√≠ ${wallet}:\n`;
    message += `T·ªïng vol: ${walletTotal.toFixed(2)} BSC-USD\n`;
    message += `S·ªë l∆∞·ª£ng tx: ${walletStats.length}\n`;

    if (walletStats.length > 0) {
      // L·∫•y giao d·ªãch ƒë·∫ßu ti√™n c·ªßa v√≠
      const firstTx = walletStats[walletStats.length - 1];
      message += `‚è∞ Tx ƒë·∫ßu ti√™n trong ng√†y: [${moment.utc(firstTx.time)
        .utcOffset(7)
        .format("DD/MM/YYYY HH:mm:ss")}] UTC+7 - ${firstTx.value.toFixed(
        2
      )} BSC-USD\n`;

      // L·∫•y giao d·ªãch m·ªõi nh·∫•t c·ªßa v√≠
      const latestTx = walletStats[0];
      message += `üîÑ Tx cu·ªëi c√πng trong ng√†y: [${moment.utc(latestTx.time)
        .utcOffset(7)
        .format("DD/MM/YYYY HH:mm:ss")}] UTC+7 - ${latestTx.value.toFixed(
        2
      )} BSC-USD\n`;
    }
    message += "\n";
    index++;
  }

  bot.sendMessage(chatId, message);
});

// X·ª≠ l√Ω l·ªánh /remove
bot.onText(/\/remove (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const walletAddress = match[1].trim();
  const data = trackedData.get(chatId);

  if (!data || !data.wallets.has(walletAddress)) {
    return bot.sendMessage(
      chatId,
      "‚ö†Ô∏è V√≠ n√†y kh√¥ng c√≥ trong danh s√°ch theo d√µi."
    );
  }

  data.wallets.delete(walletAddress);
  // L∆∞u v√†o file
  saveData();

  bot.sendMessage(
    chatId,
    `‚úÖ ƒê√£ x√≥a v√≠ kh·ªèi danh s√°ch theo d√µi:\nüîπ ${walletAddress}`
  );
});

// X·ª≠ l√Ω l·ªánh /clear
bot.onText(/\/clear/, (msg) => {
  const chatId = msg.chat.id;
  trackedData.delete(chatId);
  // L∆∞u v√†o file
  saveData();

  bot.sendMessage(chatId, "ƒê√£ x√≥a t·∫•t c·∫£ v√≠ kh·ªèi danh s√°ch theo d√µi.");
});

// X·ª≠ l√Ω l·ªói
bot.on("polling_error", (error) => {
  console.error("L·ªói polling:", error);
});

console.log("Bot ƒëang ch·∫°y...");
